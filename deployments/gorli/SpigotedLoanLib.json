{
  "address": "0x1CdA8B7b1De3D127cB68165d652C31d953Fbc261",
  "abi": [
    {
      "inputs": [],
      "name": "TradeFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "revenueToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "revenueTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "debtToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "debtTokensBought",
          "type": "uint256"
        }
      ],
      "name": "TradeSpigotRevenue",
      "type": "event"
    }
  ],
  "transactionHash": "0x11ffacfc0ed757fa50191125793be1884f1cd5f26016bb1af4362cb673866a95",
  "receipt": {
    "to": null,
    "from": "0x41d28426925E8201b2A163C4bC1A45D9EAFb32f4",
    "contractAddress": "0x1CdA8B7b1De3D127cB68165d652C31d953Fbc261",
    "transactionIndex": 38,
    "gasUsed": "645145",
    "logsBloom": "0x
    "blockHash": "0x0251426426c1e8ae7a69dfad967b38c525d13738f0379c137dd20183379d826e",
    "transactionHash": "0x11ffacfc0ed757fa50191125793be1884f1cd5f26016bb1af4362cb673866a95",
    "logs": [],
    "blockNumber": 7399146,
    "cumulativeGasUsed": "20028255",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "ae19c6f185a746e8a25af9abfb56b5c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"TradeFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"revenueToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"revenueTokenAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"debtToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"debtTokensBought\",\"type\":\"uint256\"}],\"name\":\"TradeSpigotRevenue\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/SpigotedLoanLib.sol\":\"SpigotedLoanLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/interfaces/ISpigot.sol\":{\"content\":\"interface ISpigot {\\n\\n    struct Setting {\\n        address token;                // token to claim as revenue from contract\\n        uint8 ownerSplit;             // x/100 % to Owner, rest to Treasury\\n        bytes4 claimFunction;         // function signature on contract to call and claim revenue\\n        bytes4 transferOwnerFunction; // function signature on conract to call and transfer ownership \\n    }\\n\\n    // Spigot Events\\n\\n    event AddSpigot(address indexed revenueContract, address token, uint256 ownerSplit);\\n\\n    event RemoveSpigot (address indexed revenueContract, address token);\\n\\n    event UpdateWhitelistFunction(bytes4 indexed func, bool indexed allowed);\\n\\n    event UpdateOwnerSplit(address indexed revenueContract, uint8 indexed split);\\n\\n    event ClaimRevenue(address indexed token, uint256 indexed amount, uint256 escrowed, address revenueContract);\\n\\n    event ClaimEscrow(address indexed token, uint256 indexed amount, address owner);\\n\\n    // Stakeholder Events\\n\\n    event UpdateOwner(address indexed newOwner);\\n\\n    event UpdateOperator(address indexed newOperator);\\n\\n    event UpdateTreasury(address indexed newTreasury);\\n\\n    // Errors \\n    error BadFunction();\\n\\n    error ClaimFailed();\\n\\n    error NoRevenue();\\n\\n    error CallerAccessDenied();\\n    \\n    error BadSetting();\\n\\n\\n    function owner() external view returns (address);\\n    function treasury() external view returns (address);\\n    function operator() external view returns (address);\\n    \\n    function getSetting(address revenueContract) external view returns (address, uint8, bytes4, bytes4);\\n\\n    // ops funcs \\n\\n    function claimRevenue(address revenueContract, bytes calldata data) external returns (uint256 claimed);\\n \\n    function operate(address revenueContract, bytes calldata data) external returns (bool);\\n\\n\\n    // owner funcs \\n    function getEscrowBalance(address token) external view returns (uint256);\\n \\n    function claimEscrow(address token) external returns (uint256 claimed) ;\\n \\n    function addSpigot(address revenueContract, Setting memory setting) external returns (bool);\\n \\n    function removeSpigot(address revenueContract) external returns (bool);\\n        \\n  \\n    // stakeholder funcs \\n\\n    function updateOwnerSplit(address revenueContract, uint8 ownerSplit) external returns(bool);\\n\\n    function updateOwner(address newOwner) external returns (bool);\\n \\n    function updateOperator(address newOperator) external returns (bool);\\n \\n    function updateTreasury(address newTreasury) external returns (bool);\\n \\n    function updateWhitelistedFunction(bytes4 func, bool allowed) external returns (bool);\\n\\n}\\n\",\"keccak256\":\"0xad9ef92af046df412100c03676efb036c2bbe77ff0ccd7df3c0b413a6f040552\"},\"contracts/interfaces/ISpigotedLoan.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\nimport {ISpigot} from \\\"./ISpigot.sol\\\";\\n\\ninterface ISpigotedLoan {\\n  event RevenuePayment(\\n    address indexed token,\\n    uint256 indexed amount\\n    // dont need to track value like other events because _repay already emits\\n    // this event is just semantics/helper to track payments from revenue specifically\\n  );\\n\\n  error NoSpigot();\\n  error TradeFailed();\\n  error ReleaseSpigotFailed();\\n\\n  function unused(address token) external returns(uint256);\\n\\n  function addSpigot(address revenueContract, ISpigot.Setting calldata setting) external returns(bool);\\n  function updateOwnerSplit(address revenueContract) external returns(bool);\\n  function updateWhitelist(bytes4 func, bool allowed) external returns(bool);\\n  function releaseSpigot() external returns(bool);\\n\\n  function claimAndTrade(\\n    address claimToken, \\n    bytes calldata zeroExTradeData\\n  ) external returns(uint256 tokensBought);\\n\\n  function claimAndRepay(\\n    address token,\\n    bytes calldata zeroExTradeData\\n  ) external returns(uint256);\\n\\n  function useAndRepay(uint256 amount) external returns(bool);\\n\\n  function sweep(address token) external returns(uint256);\\n}\\n\",\"keccak256\":\"0x433059f73b2d10fcf9d5c6bbd84d002248e1d805594b9a3dd72c3598a47b78b5\"},\"contracts/utils/SpigotedLoanLib.sol\":{\"content\":\"import { ISpigot } from \\\"../interfaces/ISpigot.sol\\\";\\nimport { ISpigotedLoan } from \\\"../interfaces/ISpigotedLoan.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary SpigotedLoanLib {\\n    error TradeFailed();\\n    event TradeSpigotRevenue(\\n        address indexed revenueToken,\\n        uint256 revenueTokenAmount,\\n        address indexed debtToken,\\n        uint256 indexed debtTokensBought\\n    );\\n\\n    function claimAndTrade(\\n        address claimToken,\\n        address targetToken,\\n        address swapTarget,\\n        address spigot,\\n        uint256 unused,\\n        bytes calldata zeroExTradeData\\n    ) \\n        external\\n        returns(uint256 tokensBought, uint256 totalUnused)\\n    {\\n        uint256 existingClaimTokens = IERC20(claimToken).balanceOf(address(this));\\n        uint256 existingTargetTokens = IERC20(targetToken).balanceOf(address(this));\\n\\n        uint256 tokensClaimed = ISpigot(spigot).claimEscrow(claimToken);\\n\\n        if (claimToken == address(0)) {\\n            // if claiming/trading eth send as msg.value to dex\\n            (bool success, ) = swapTarget.call{value: tokensClaimed}(zeroExTradeData);\\n            if(!success) { revert TradeFailed(); }\\n        } else {\\n            // approve exact amount so other tokens in contract get used e.g. lender funds\\n            IERC20(claimToken).approve(swapTarget, unused + tokensClaimed);\\n            (bool success, ) = swapTarget.call(zeroExTradeData);\\n            if(!success) { revert TradeFailed(); }\\n        }\\n\\n        uint256 targetTokens = IERC20(targetToken).balanceOf(address(this));\\n\\n        // ideally we could use oracle to calculate # of tokens to receive\\n        // but claimToken might not have oracle. targetToken must have oracle\\n\\n        // underflow revert ensures we have more tokens than we started with\\n        tokensBought = targetTokens - existingTargetTokens;\\n\\n        emit TradeSpigotRevenue(\\n            claimToken,\\n            tokensClaimed,\\n            targetToken,\\n            tokensBought\\n        );\\n\\n        uint256 remainingClaimTokens = IERC20(claimToken).balanceOf(address(this));\\n        // use reserve revenue to repay debt\\n        if(existingClaimTokens > remainingClaimTokens) {\\n          uint256 diff = existingClaimTokens - remainingClaimTokens;\\n          // used more tokens than we had in unused\\n          if(diff > unused) revert TradeFailed(); \\n          else totalUnused = unused - diff;\\n        } else {\\n          // didnt sell all revenue in trade\\n          totalUnused = unused + (remainingClaimTokens - existingClaimTokens);\\n        }\\n\\n    }\\n}\\n\",\"keccak256\":\"0x97c36b9ca3dd0f1918f9c6f49722a7b9ad9934b8c24e9f631ed346208f9a6409\"}},\"version\":1}",
  "bytecode": "0x610abb610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063b085a00d1461003a575b600080fd5b81801561004657600080fd5b50610061600480360381019061005c9190610769565b610078565b60405161006f929190610827565b60405180910390f35b60008060008973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016100b6919061085f565b60206040518083038186803b1580156100ce57600080fd5b505afa1580156100e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610106919061088f565b905060008973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610143919061085f565b60206040518083038186803b15801561015b57600080fd5b505afa15801561016f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610193919061088f565b905060008873ffffffffffffffffffffffffffffffffffffffff1663f9b0631e8d6040518263ffffffff1660e01b81526004016101d0919061085f565b602060405180830381600087803b1580156101ea57600080fd5b505af11580156101fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610222919061088f565b9050600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614156103065760008a73ffffffffffffffffffffffffffffffffffffffff168289896040516102839291906108fb565b60006040518083038185875af1925050503d80600081146102c0576040519150601f19603f3d011682016040523d82523d6000602084013e6102c5565b606091505b5050905080610300576040517f2d8ef0cf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50610447565b8b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b38b838b61032f9190610943565b6040518363ffffffff1660e01b815260040161034c9291906109a8565b602060405180830381600087803b15801561036657600080fd5b505af115801561037a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039e9190610a09565b5060008a73ffffffffffffffffffffffffffffffffffffffff1688886040516103c89291906108fb565b6000604051808303816000865af19150503d8060008114610405576040519150601f19603f3d011682016040523d82523d6000602084013e61040a565b606091505b5050905080610445576040517f2d8ef0cf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b60008b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610482919061085f565b60206040518083038186803b15801561049a57600080fd5b505afa1580156104ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d2919061088f565b905082816104e09190610a36565b9550858c73ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff167f9c7e3719be13960547a8b4b08bb9a149591882ce5bdd3f07331d27590ab41e61856040516105409190610a6a565b60405180910390a460008d73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610583919061085f565b60206040518083038186803b15801561059b57600080fd5b505afa1580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d3919061088f565b90508085111561063b57600081866105eb9190610a36565b90508a811115610627576040517f2d8ef0cf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808b6106339190610a36565b965050610655565b84816106479190610a36565b8a6106529190610943565b95505b505050505097509795505050505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061069b82610670565b9050919050565b6106ab81610690565b81146106b657600080fd5b50565b6000813590506106c8816106a2565b92915050565b6000819050919050565b6106e1816106ce565b81146106ec57600080fd5b50565b6000813590506106fe816106d8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261072957610728610704565b5b8235905067ffffffffffffffff81111561074657610745610709565b5b6020830191508360018202830111156107625761076161070e565b5b9250929050565b600080600080600080600060c0888a03121561078857610787610666565b5b60006107968a828b016106b9565b97505060206107a78a828b016106b9565b96505060406107b88a828b016106b9565b95505060606107c98a828b016106b9565b94505060806107da8a828b016106ef565b93505060a088013567ffffffffffffffff8111156107fb576107fa61066b565b5b6108078a828b01610713565b925092505092959891949750929550565b610821816106ce565b82525050565b600060408201905061083c6000830185610818565b6108496020830184610818565b9392505050565b61085981610690565b82525050565b60006020820190506108746000830184610850565b92915050565b600081519050610889816106d8565b92915050565b6000602082840312156108a5576108a4610666565b5b60006108b38482850161087a565b91505092915050565b600081905092915050565b82818337600083830152505050565b60006108e283856108bc565b93506108ef8385846108c7565b82840190509392505050565b60006109088284866108d6565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061094e826106ce565b9150610959836106ce565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561098e5761098d610914565b5b828201905092915050565b6109a2816106ce565b82525050565b60006040820190506109bd6000830185610850565b6109ca6020830184610999565b9392505050565b60008115159050919050565b6109e6816109d1565b81146109f157600080fd5b50565b600081519050610a03816109dd565b92915050565b600060208284031215610a1f57610a1e610666565b5b6000610a2d848285016109f4565b91505092915050565b6000610a41826106ce565b9150610a4c836106ce565b925082821015610a5f57610a5e610914565b5b828203905092915050565b6000602082019050610a7f6000830184610999565b9291505056fea26469706673582212208a5b4470dd92c7bd97e9121aadd67512b89ac762f23d99cff05a1cba43fe155364736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063b085a00d1461003a575b600080fd5b81801561004657600080fd5b50610061600480360381019061005c9190610769565b610078565b60405161006f929190610827565b60405180910390f35b60008060008973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016100b6919061085f565b60206040518083038186803b1580156100ce57600080fd5b505afa1580156100e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610106919061088f565b905060008973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610143919061085f565b60206040518083038186803b15801561015b57600080fd5b505afa15801561016f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610193919061088f565b905060008873ffffffffffffffffffffffffffffffffffffffff1663f9b0631e8d6040518263ffffffff1660e01b81526004016101d0919061085f565b602060405180830381600087803b1580156101ea57600080fd5b505af11580156101fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610222919061088f565b9050600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1614156103065760008a73ffffffffffffffffffffffffffffffffffffffff168289896040516102839291906108fb565b60006040518083038185875af1925050503d80600081146102c0576040519150601f19603f3d011682016040523d82523d6000602084013e6102c5565b606091505b5050905080610300576040517f2d8ef0cf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50610447565b8b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b38b838b61032f9190610943565b6040518363ffffffff1660e01b815260040161034c9291906109a8565b602060405180830381600087803b15801561036657600080fd5b505af115801561037a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039e9190610a09565b5060008a73ffffffffffffffffffffffffffffffffffffffff1688886040516103c89291906108fb565b6000604051808303816000865af19150503d8060008114610405576040519150601f19603f3d011682016040523d82523d6000602084013e61040a565b606091505b5050905080610445576040517f2d8ef0cf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b60008b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610482919061085f565b60206040518083038186803b15801561049a57600080fd5b505afa1580156104ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d2919061088f565b905082816104e09190610a36565b9550858c73ffffffffffffffffffffffffffffffffffffffff168e73ffffffffffffffffffffffffffffffffffffffff167f9c7e3719be13960547a8b4b08bb9a149591882ce5bdd3f07331d27590ab41e61856040516105409190610a6a565b60405180910390a460008d73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610583919061085f565b60206040518083038186803b15801561059b57600080fd5b505afa1580156105af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d3919061088f565b90508085111561063b57600081866105eb9190610a36565b90508a811115610627576040517f2d8ef0cf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808b6106339190610a36565b965050610655565b84816106479190610a36565b8a6106529190610943565b95505b505050505097509795505050505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061069b82610670565b9050919050565b6106ab81610690565b81146106b657600080fd5b50565b6000813590506106c8816106a2565b92915050565b6000819050919050565b6106e1816106ce565b81146106ec57600080fd5b50565b6000813590506106fe816106d8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261072957610728610704565b5b8235905067ffffffffffffffff81111561074657610745610709565b5b6020830191508360018202830111156107625761076161070e565b5b9250929050565b600080600080600080600060c0888a03121561078857610787610666565b5b60006107968a828b016106b9565b97505060206107a78a828b016106b9565b96505060406107b88a828b016106b9565b95505060606107c98a828b016106b9565b94505060806107da8a828b016106ef565b93505060a088013567ffffffffffffffff8111156107fb576107fa61066b565b5b6108078a828b01610713565b925092505092959891949750929550565b610821816106ce565b82525050565b600060408201905061083c6000830185610818565b6108496020830184610818565b9392505050565b61085981610690565b82525050565b60006020820190506108746000830184610850565b92915050565b600081519050610889816106d8565b92915050565b6000602082840312156108a5576108a4610666565b5b60006108b38482850161087a565b91505092915050565b600081905092915050565b82818337600083830152505050565b60006108e283856108bc565b93506108ef8385846108c7565b82840190509392505050565b60006109088284866108d6565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061094e826106ce565b9150610959836106ce565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561098e5761098d610914565b5b828201905092915050565b6109a2816106ce565b82525050565b60006040820190506109bd6000830185610850565b6109ca6020830184610999565b9392505050565b60008115159050919050565b6109e6816109d1565b81146109f157600080fd5b50565b600081519050610a03816109dd565b92915050565b600060208284031215610a1f57610a1e610666565b5b6000610a2d848285016109f4565b91505092915050565b6000610a41826106ce565b9150610a4c836106ce565b925082821015610a5f57610a5e610914565b5b828203905092915050565b6000602082019050610a7f6000830184610999565b9291505056fea26469706673582212208a5b4470dd92c7bd97e9121aadd67512b89ac762f23d99cff05a1cba43fe155364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
